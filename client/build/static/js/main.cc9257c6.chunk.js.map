{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","authCode","setAuthCode","useEffect","console","log","Axios","post","code","then","res","data","catch","err","URL","document","location","searchParams","get","className","onClick","alert","window","replace","input","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mQAsFeA,MA9Ef,WAAgB,IAAD,EACkBC,mBAAS,MAD3B,mBACPC,EADO,KACGC,EADH,KAmEb,OAhEAC,qBAAU,WACRC,QAAQC,IAAI,yBAA2BJ,GACvB,OAAbA,GACDK,IAAMC,KAAK,WAAW,CACpBC,KAAKP,IAENQ,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,SAEjBC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QAGf,CAACZ,IAEJE,qBAAU,WACR,IACIK,EADU,IAAIM,IAAIC,SAASC,UAAWC,aACxBC,IAAI,QACV,KAATV,EACDN,EAAYM,GAEZJ,QAAQC,IAAI,mBAEb,IA0CD,yBAAKc,UAAU,OACb,uDACA,4BAAQC,QAAS,kBAzCnBhB,QAAQC,IAAI,uBACZC,IAAMY,IAAI,SACTT,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,OACA,IAAbD,EAAIC,MACLU,MAAM,iCACNC,OAAON,SAASO,QArCN,0BAuCVD,OAAON,SAASO,QAAQb,EAAIC,SAG/BC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QA6BZ,gBACA,4BAAQO,QAAS,WAxBnBhB,QAAQC,IAAI,0BAwBV,oBACA,4BAAQe,QAAS,kBArBnBhB,QAAQC,IAAI,wBACZC,IAAMC,KAAK,eAAe,CACxBiB,MAAM,sBAEPf,MAAK,SAACC,GACLN,QAAQC,IAAIK,GACZW,MAAM,yBAEPT,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QAYZ,wBACA,4BAAQO,QAAS,WATnBhB,QAAQC,IAAI,yBASV,6BCrEcoB,QACW,cAA7BH,OAAON,SAASU,UAEe,UAA7BJ,OAAON,SAASU,UAEhBJ,OAAON,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.cc9257c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport {useState, useEffect, useLayoutEffect} from 'react'\r\nimport './App.css';\r\nimport Axios from 'axios'\r\n\r\n\r\nvar ngRokDomain = \"http://localhost:8080\"\r\n\r\nfunction App() {\r\n  const[authCode, setAuthCode] = useState(null)\r\n\r\n  useEffect(() =>{\r\n    console.log(\"new code has been set \" + authCode)\r\n    if(authCode !== null){\r\n      Axios.post('/setCode',{\r\n        code:authCode\r\n      })\r\n      .then((res) =>{\r\n        console.log(res.data)\r\n      })\r\n      .catch((err) =>{\r\n        console.log(err)\r\n      })\r\n    }\r\n  }, [authCode])\r\n\r\n  useEffect(() =>{\r\n    let params = (new URL(document.location)).searchParams;\r\n    let code = params.get(\"code\");\r\n    if(code !== \"\"){\r\n      setAuthCode(code)\r\n    }else{\r\n      console.log(\"no code found\")\r\n    }\r\n  }, [])\r\n\r\n  const authenticate = () =>{\r\n    console.log(\"authenticating\")\r\n    Axios.get('/auth')\r\n    .then((res) =>{\r\n      console.log(res.data)\r\n      if(res.data === true){ // if user authenticated returns true\r\n        alert(\"user is already authenticated\")\r\n        window.location.replace(ngRokDomain)\r\n      }else{\r\n        window.location.replace(res.data)\r\n      }\r\n    })\r\n    .catch((err) =>{\r\n      console.log(err)\r\n    })\r\n  }\r\n\r\n\r\n  const setAccessToken = () =>{\r\n    console.log(\"setting access token\")\r\n  }\r\n\r\n  const uploadVideo = () =>{\r\n    console.log(\"uploading video\")\r\n    Axios.post('/uploadVideo',{\r\n      input:\"hello from client\"\r\n    })\r\n    .then((res)=>{\r\n      console.log(res)\r\n      alert(\"video was uploaded\")\r\n    })\r\n    .catch((err) =>{\r\n      console.log(err)\r\n    })\r\n  }\r\n  const getVids = () =>{\r\n    console.log(\"getting your videos\")\r\n  }\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <p>Youtube API test project</p>\r\n      <button onClick={() => authenticate()}>Authenticate</button>\r\n      <button onClick={() => setAccessToken()}>Set access token</button>\r\n      <button onClick={() => uploadVideo()}>Upload Youtube Video</button>\r\n      <button onClick={() => getVids()}>Get Videos for Username</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}