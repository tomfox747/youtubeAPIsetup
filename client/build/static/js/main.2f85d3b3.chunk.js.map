{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","authCode","setAuthCode","useEffect","console","log","Axios","post","code","then","res","data","catch","err","URL","document","location","searchParams","get","className","onClick","alert","window","replace","input","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"mQAqFeA,MA7Ef,WAAgB,IAAD,EACkBC,mBAAS,MAD3B,mBACPC,EADO,KACGC,EADH,KAkEb,OA/DAC,qBAAU,WACRC,QAAQC,IAAI,yBAA2BJ,GACvB,OAAbA,GACDK,IAAMC,KAAK,WAAW,CACpBC,KAAKP,IAENQ,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,SAEjBC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QAGf,CAACZ,IAEJE,qBAAU,WACR,IACIK,EADU,IAAIM,IAAIC,SAASC,UAAWC,aACxBC,IAAI,QACV,KAATV,EACDN,EAAYM,GAEZJ,QAAQC,IAAI,mBAEb,IAyCD,yBAAKc,UAAU,OACb,uDACA,4BAAQC,QAAS,kBAxCnBhB,QAAQC,IAAI,uBACZC,IAAMY,IAAI,SACTT,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,OACA,IAAbD,EAAIC,MACLU,MAAM,iCACNC,OAAON,SAASO,QArCN,6BAuCVD,OAAON,SAASO,QAAQb,EAAIC,SAG/BC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QA4BZ,gBACA,4BAAQO,QAAS,WAvBnBhB,QAAQC,IAAI,0BAuBV,oBACA,4BAAQe,QAAS,kBApBnBhB,QAAQC,IAAI,wBACZC,IAAMC,KAAK,eAAe,CACxBiB,MAAM,sBAEPf,MAAK,SAACC,GACLN,QAAQC,IAAIK,EAAIC,SAEjBC,OAAM,SAACC,GACNT,QAAQC,IAAIQ,QAYZ,wBACA,4BAAQO,QAAS,WATnBhB,QAAQC,IAAI,yBASV,6BCpEcoB,QACW,cAA7BH,OAAON,SAASU,UAEe,UAA7BJ,OAAON,SAASU,UAEhBJ,OAAON,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASd,SAASe,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdvB,OAAM,SAAAwB,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.2f85d3b3.chunk.js","sourcesContent":["import React from 'react';\nimport {useState, useEffect, useLayoutEffect} from 'react'\nimport './App.css';\nimport Axios from 'axios'\n\n\nvar ngRokDomain = \"http://cb3df030.ngrok.io\"\n\nfunction App() {\n  const[authCode, setAuthCode] = useState(null)\n\n  useEffect(() =>{\n    console.log(\"new code has been set \" + authCode)\n    if(authCode !== null){\n      Axios.post('/setCode',{\n        code:authCode\n      })\n      .then((res) =>{\n        console.log(res.data)\n      })\n      .catch((err) =>{\n        console.log(err)\n      })\n    }\n  }, [authCode])\n\n  useEffect(() =>{\n    let params = (new URL(document.location)).searchParams;\n    let code = params.get(\"code\");\n    if(code !== \"\"){\n      setAuthCode(code)\n    }else{\n      console.log(\"no code found\")\n    }\n  }, [])\n\n  const authenticate = () =>{\n    console.log(\"authenticating\")\n    Axios.get('/auth')\n    .then((res) =>{\n      console.log(res.data)\n      if(res.data === true){ // if user authenticated returns true\n        alert(\"user is already authenticated\")\n        window.location.replace(ngRokDomain)\n      }else{\n        window.location.replace(res.data)\n      }\n    })\n    .catch((err) =>{\n      console.log(err)\n    })\n  }\n\n\n  const setAccessToken = () =>{\n    console.log(\"setting access token\")\n  }\n  \n  const uploadVideo = () =>{\n    console.log(\"uploading video\")\n    Axios.post('/uploadVideo',{\n      input:\"hello from client\"\n    })\n    .then((res)=>{\n      console.log(res.data)\n    })\n    .catch((err) =>{\n      console.log(err)\n    })\n  }\n  const getVids = () =>{\n    console.log(\"getting your videos\")\n  }\n  \n  return (\n    <div className=\"App\">\n      <p>Youtube API test project</p>\n      <button onClick={() => authenticate()}>Authenticate</button>\n      <button onClick={() => setAccessToken()}>Set access token</button>\n      <button onClick={() => uploadVideo()}>Upload Youtube Video</button>\n      <button onClick={() => getVids()}>Get Videos for Username</button>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}